import{streamArray as c}from"yield-stream";import{OpenAIAPIEndpoints as u}from"../types.js";import{ENCODER as m}from"../../globs/shared.js";import{OpenAIError as e}from"../errors.js";import{fetchWithBackoff as R}from"../backoff.js";import{ChatStream as g,EventStream as y,getTokensFromResponse as S,TokenStream as _}from"../streaming/index.js";const v=async(n,h,{mode:r="tokens",apiBase:f="https://api.openai.com/v1",apiKey:i=process.env.OPENAI_API_KEY,apiHeaders:d={},controller:l,onDone:A,onParse:E,fetch:I}={})=>{if(!i)throw new e("NO_API_KEY");const p=n==="completions"||n==="chat",N=u[n],t=await R(`${f}/${N}`,{method:"POST",body:JSON.stringify({...h,stream:p?!0:void 0}),headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json",Accept:"application/json",...d},signal:l?.signal},I);switch(t.status){case 401:throw new e("INVALID_API_KEY");case 404:throw new e("INVALID_MODEL");case 429:throw new e("RATE_LIMIT_REACHED");case 500:throw new e("SERVER_ERROR");default:if(!t.body)throw new e("UNKNOWN")}let o;const s={mode:r,onDone:A,onParse:E};if(p)switch(r){case"raw":o=y(t.body,s);break;case"tokens":switch(n){case"chat":o=g(t.body,s);break;default:o=_(t.body,s);break}break;default:throw console.error(`Unknown mode: ${r} for streaming response.`),new e("UNKNOWN")}else{const a=await t.text();switch(r){case"tokens":const O=JSON.parse(a),w=S(O);if(typeof w!="string"){console.error("No text choices received from OpenAI: "+a),o=c([]);break}const k=m.encode(w);o=c([k]);break;case"raw":const b=m.encode(a);o=c([b]);break;default:throw console.error(`Unknown mode: ${r} for non-streaming response.`),new e("UNKNOWN")}}return o};export{v as OpenAI};
